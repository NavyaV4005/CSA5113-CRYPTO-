#include <stdio.h>
int mod26(int x) {
    x %= 26;
    if (x < 0) x += 26;
    return x;
}
int det(int matrix[2][2]) {
    return mod26(matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0]);
}
int modInverse(int a) {
    a = a % 26;
    for (int x = 1; x < 26; x++) {
        if ((a * x) % 26 == 1)
            return x;
    }
    return -1;
}

int inverseMatrix(int matrix[2][2], int inv[2][2]) {
    int determinant = det(matrix);
    int invDet = modInverse(determinant);
    if (invDet == -1) return 0; // Not invertible

    inv[0][0] = mod26(matrix[1][1] * invDet);
    inv[0][1] = mod26(-matrix[0][1] * invDet);
    inv[1][0] = mod26(-matrix[1][0] * invDet);
    inv[1][1] = mod26(matrix[0][0] * invDet);
    return 1;
}
void multiply(int A[2][2], int B[2][2], int res[2][2]) {
    for (int i=0; i<2; i++)
        for (int j=0; j<2; j++) {
            res[i][j] = 0;
            for (int k=0; k<2; k++)
                res[i][j] += A[i][k]*B[k][j];
            res[i][j] = mod26(res[i][j]);
        }
}

void printMatrix(int m[2][2]) {
    for (int i=0; i<2; i++) {
        for (int j=0; j<2; j++)
            printf("%3d ", m[i][j]);
        printf("\n");
    }
}

int main() {
    int P[2][2] = {{7, 4}, {19, 19}};
    int C[2][2] = {{2, 19}, {5, 7}}; 

    int P_inv[2][2], K[2][2];
    if (!inverseMatrix(P, P_inv)) {
        printf("Plaintext matrix is not invertible mod 26\n");
        return 1;
    }

    multiply(C, P_inv, K);
    printf("Recovered Key Matrix:\n");
    printMatrix(K);
    return 0;
}
